// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// ResourceRewriter is an autogenerated mock type for the ResourceRewriter type
type ResourceRewriter struct {
	mock.Mock
}

type ResourceRewriter_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceRewriter) EXPECT() *ResourceRewriter_Expecter {
	return &ResourceRewriter_Expecter{mock: &_m.Mock}
}

// BeforeImport provides a mock function with given fields: u
func (_m *ResourceRewriter) BeforeImport(u *unstructured.Unstructured) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceRewriter_BeforeImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeforeImport'
type ResourceRewriter_BeforeImport_Call struct {
	*mock.Call
}

// BeforeImport is a helper method to define mock.On call
//   - u *unstructured.Unstructured
func (_e *ResourceRewriter_Expecter) BeforeImport(u interface{}) *ResourceRewriter_BeforeImport_Call {
	return &ResourceRewriter_BeforeImport_Call{Call: _e.mock.On("BeforeImport", u)}
}

func (_c *ResourceRewriter_BeforeImport_Call) Run(run func(u *unstructured.Unstructured)) *ResourceRewriter_BeforeImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*unstructured.Unstructured))
	})
	return _c
}

func (_c *ResourceRewriter_BeforeImport_Call) Return(_a0 error) *ResourceRewriter_BeforeImport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourceRewriter_BeforeImport_Call) RunAndReturn(run func(*unstructured.Unstructured) error) *ResourceRewriter_BeforeImport_Call {
	_c.Call.Return(run)
	return _c
}

// BeforeServing provides a mock function with given fields: u
func (_m *ResourceRewriter) BeforeServing(u *unstructured.Unstructured) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceRewriter_BeforeServing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeforeServing'
type ResourceRewriter_BeforeServing_Call struct {
	*mock.Call
}

// BeforeServing is a helper method to define mock.On call
//   - u *unstructured.Unstructured
func (_e *ResourceRewriter_Expecter) BeforeServing(u interface{}) *ResourceRewriter_BeforeServing_Call {
	return &ResourceRewriter_BeforeServing_Call{Call: _e.mock.On("BeforeServing", u)}
}

func (_c *ResourceRewriter_BeforeServing_Call) Run(run func(u *unstructured.Unstructured)) *ResourceRewriter_BeforeServing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*unstructured.Unstructured))
	})
	return _c
}

func (_c *ResourceRewriter_BeforeServing_Call) Return(_a0 error) *ResourceRewriter_BeforeServing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourceRewriter_BeforeServing_Call) RunAndReturn(run func(*unstructured.Unstructured) error) *ResourceRewriter_BeforeServing_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewResourceRewriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewResourceRewriter creates a new instance of ResourceRewriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResourceRewriter(t mockConstructorTestingTNewResourceRewriter) *ResourceRewriter {
	mock := &ResourceRewriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
