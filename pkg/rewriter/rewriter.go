package rewriter

import (
	"encoding/json"
	"fmt"
	"strings"

	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// annotationForOriginalValue creates annotation key for given value.
func annotationForOriginalValue(name string) string {
	return fmt.Sprintf("troubleshoot-live/%s", name)
}

func annotationForField(fieldPath ...string) string {
	return annotationForOriginalValue(strings.Join(fieldPath, "."))
}

//go:generate mockery --name ResourceRewriter --with-expecter

// ResourceRewriter prepares object for saving on import and rewrites the object
// before its returned back from proxy server.
type ResourceRewriter interface {
	// BeforeImport is invoked when object is created in API server.
	BeforeImport(u *unstructured.Unstructured) error

	// BeforeServing is applied when object passes proxy (via List or Get request).
	BeforeServing(u *unstructured.Unstructured) error
}

var _ ResourceRewriter = (*removeField)(nil)

// RemoveField removes a field from original object. This should be used for metadata
// fields that are generated by API server on write.
func RemoveField(path ...string) ResourceRewriter {
	return &removeField{
		fieldPath: path,
	}
}

type removeField struct {
	fieldPath []string
}

func (r *removeField) annotationName() string {
	return annotationForField(r.fieldPath...)
}

func (r *removeField) BeforeImport(u *unstructured.Unstructured) error {
	value, ok, err := unstructured.NestedFieldNoCopy(u.Object, r.fieldPath...)
	if err != nil {
		return err
	}

	// Do not process empty `nil` values.
	if !ok || value == nil {
		return nil
	}

	unstructured.RemoveNestedField(u.Object, r.fieldPath...)
	serialized, err := json.Marshal(value)
	if err != nil {
		return err
	}

	return addAnnotation(u, r.annotationName(), string(serialized))
}

func (r *removeField) BeforeServing(u *unstructured.Unstructured) error {
	value, ok, err := unstructured.NestedString(u.Object, "metadata", "annotations", r.annotationName())
	if err != nil {
		return err
	}
	if !ok {
		return nil
	}

	var unserialized any
	if err := json.Unmarshal([]byte(value), &unserialized); err != nil {
		return err
	}

	if err := unstructured.SetNestedField(u.Object, unserialized, r.fieldPath...); err != nil {
		return err
	}
	unstructured.RemoveNestedField(u.Object, "metadata", "annotations", r.annotationName())
	return nil
}

func addAnnotation(u *unstructured.Unstructured, key, value string) error {
	annotations, ok, err := unstructured.NestedStringMap(u.Object, "metadata", "annotations")
	if err != nil {
		return err
	}

	if !ok {
		annotations = map[string]string{}
	}

	annotations[key] = value
	return unstructured.SetNestedStringMap(u.Object, annotations, "metadata", "annotations")
}
